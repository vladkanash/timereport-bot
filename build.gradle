plugins {
    id 'application'
    id "com.palantir.docker" version "0.22.1"
    id "com.palantir.docker-run" version "0.22.1"
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

group 'org.vladkanash'
version '0.1.0'

sourceCompatibility = 11

repositories {
    mavenCentral()
    jcenter()
    maven {
        url "https://repo.spring.io/plugins-release/"
    }
}

dependencies {
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.6'
    implementation group: 'org.apache.velocity', name: 'velocity', version: '1.7'
    implementation group: 'gui.ava', name: 'html2image', version: '2.0.1'
    implementation group: 'com.slack.api', name: 'bolt-jetty', version: '1.0.10'
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    implementation group: 'com.google.dagger', name: 'dagger', version: '2.28'
    implementation group: 'org.codehaus.groovy', name: 'groovy', version: '3.0.5'
    implementation group: 'org.yaml', name: 'snakeyaml', version: '1.26'
    implementation group: 'it.sauronsoftware.cron4j', name: 'cron4j', version: '2.2.5'
    implementation group: 'org.cfg4j', name: 'cfg4j-core', version: '4.4.1'
    implementation group: 'com.sybit', name: 'airtable.java', version: ' 0.2.0'

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.6.2'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.3.3'
    testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '3.3.3'
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.6.2'

    annotationProcessor group: 'com.google.dagger', name: 'dagger-compiler', version: '2.28'
}

sourceSets.main.java.srcDirs = ['build/generated/sources/annotationProcessor/java/main', 'src/main/java']

application {
    mainClassName = 'org.vladkanash.Main'
}

test {
    useJUnitPlatform()
}

docker {
    name "${project.name}:${project.version}"
    files tasks.distTar.outputs   // adds resulting *.tgz to the build context
}

dockerRun {
    name "${project.name}"
    image "${project.name}:${project.version}"
    ports '3000:3000'
    clean true
}
